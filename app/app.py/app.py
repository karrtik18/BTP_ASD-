 
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W-4qDVP1UV-OtEJiLnD7PEcgfzaDD8kw
"""

import streamlit as st
import numpy as np
import joblib
import pandas as pd

 
model = joblib.load('xgboost_model.joblib')

 
feature_order = [
    'A1_Score', 'A2_Score', 'A3_Score', 'A4_Score', 'A5_Score',
    'A6_Score', 'A7_Score', 'A8_Score', 'A9_Score', 'A10_Score',
    'age', 'jundice', 'austim', 'gender_m', 'relation_Others',
    'relation_Parent', 'relation_Relative', 'relation_Self'
]

 

st.title("Autism Spectrum Disorder (ASD) Prediction üìù")
st.write(
    "This app uses a machine learning model to predict the likelihood of ASD "
    "based on the AQ-10 screening questions and other user inputs."
)
st.write(
    "Please answer the following questions. Your responses are not stored."
)


  
st.header("AQ-10 Screening Questions")
st.write("Answer 'Yes' (1) or 'No' (0) for each question.")

col1, col2 = st.columns(2)

with col1:
    a1 = st.radio("1. I often notice small sounds when others do not.", (1, 0), key="a1")
    a2 = st.radio("2. I usually concentrate more on the whole picture, rather than the small details.", (1, 0), key="a2")
    a3 = st.radio("3. I find it easy to do more than one thing at once.", (1, 0), key="a3")
    a4 = st.radio("4. If there is an interruption, I can switch back to what I was doing very quickly.", (1, 0), key="a4")
    a5 = st.radio("5. I find it easy to ‚Äòread between the lines‚Äô when someone is talking to me.", (1, 0), key="a5")

with col2:
    a6 = st.radio("6. I know how to tell if someone listening to me is getting bored.", (1, 0), key="a6")
    a7 = st.radio("7. When I‚Äôm reading a story, I find it difficult to work out the characters‚Äô intentions.", (1, 0), key="a7")
    a8 = st.radio("8. I like to collect information about categories of things.", (1, 0), key="a8")
    a9 = st.radio("9. I find it easy to work out what someone is thinking or feeling just by looking at their face.", (1, 0), key="a9")
    a10 = st.radio("10. I find it difficult to work out people‚Äôs intentions.", (1, 0), key="a10")

 
st.header("Demographic Information")
age = st.number_input("Age", min_value=4, max_value=100, value=25)
jundice = st.radio("Was the user born with jaundice?", ("Yes", "No"))
austim_family = st.radio("Does any immediate family member have a PDD?", ("Yes", "No"))
gender = st.selectbox("Gender", ["Male", "Female"])
relation = st.selectbox("Who is filling out this form?", ["Self", "Parent", "Relative", "Others"])


 

if st.button("Predict"):
     
    jundice_val = 1 if jundice == "Yes" else 0
    austim_val = 1 if austim_family == "Yes" else 0
    gender_val = 1 if gender == "Male" else 0

     
    relation_map = {
        'relation_Others': 0, 'relation_Parent': 0,
        'relation_Relative': 0, 'relation_Self': 0
    }
    
    relation_key = f'relation_{relation}'
    if relation_key in relation_map:
        relation_map[relation_key] = 1

    
    input_data = [
        a1, a2, a3, a4, a5, a6, a7, a8, a9, a10,
        age, jundice_val, austim_val, gender_val,
        relation_map['relation_Others'], relation_map['relation_Parent'],
        relation_map['relation_Relative'], relation_map['relation_Self']
    ]

     
    input_df = pd.DataFrame([input_data], columns=feature_order)

    
    prediction = model.predict(input_df.values)
    prediction_proba = model.predict_proba(input_df.values)
 
    st.subheader("Prediction Result")
    if prediction[0] == 1:
        st.error("The model predicts this individual may have ASD.")
        st.write(f"Confidence: {prediction_proba[0][1]*100:.2f}%")
    else:
        st.success("The model predicts this individual likely does not have ASD.")
        st.write(f"Confidence: {prediction_proba[0][0]*100:.2f}%")